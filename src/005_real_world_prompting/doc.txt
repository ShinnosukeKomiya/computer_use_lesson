このレッスンの終わりまでに、Claudeから一貫性のある高品質な応答を得るための効果的なプロンプトの構築方法を習得できます。
実際の現場で本当に重要なプロンプト技術を活用し、Claude.AIのようなチャットボットへのプロンプトと、エンタープライズグレードの再現可能なプロンプトの違いを理解します。
さあ、コーディングを始めましょう。
このレッスンの主な焦点は、Claude.AIのようなチャットボットの消費者やユーザーとして書くプロンプトのタイプと、大規模な顧客、または繰り返し可能で信頼性の高いプロンプトを必要とするAPIの顧客が書くプロンプトのタイプの違いにあります。
これはAnthropicのドキュメントです。プロンプトエンジニアリングに関するセクションがあり、さまざまなヒントと戦略がたくさんあります。その多くは重要ですが、中には他よりも重要なものがあります。これがこの動画で私が話したいことです。
時間をかける価値のあるヒントに焦点を当てたいと思います。インターネット上にはプロンプトに関する多くの情報があります。その中には少し疑わしいものもあります。そこで、実証的な証拠に裏付けられたプロンプトのヒントに本当に焦点を当てていきます。
まず、消費者向けプロンプトと実際のエンタープライズ向けプロンプトの違いについて、具体例を見てみましょう。
ノートブックに戻りました。以前の動画と同じ初期設定があります。これはClaude.AIのウェブサイトに入力する可能性のあるチャットボットや消費者向けプロンプトの例です。
「AIと教育に関する講演のアイデアを出すのを手伝ってください。」
そして、結果に満足できれば素晴らしいですし、そうでない場合は、フォローアップして「あっ！実はAIに焦点を当てすぎていて、教育に関する部分が足りません。これを箇条書きのリストに変更できますか？マークダウンにできますか？」と言う機会が何度でもあります。何度も何度もフォローアップできます。かなりの余地があり、許容範囲が広いのです。
では、エンタープライズグレードのプロンプトの可能性を見てみましょう。
先に警告しておきますが、これはかなり長く、この動画で読んで確認するには多すぎます。しかし、それがポイントなのです。
これらのプロンプトは長くなり、複雑になることを理解してほしいのです。構造があります。これらのプロンプトを作成するには、Claude.AIと会話するように思いついたことを次々と追加していくだけではなく、多くの労力が必要です。
これは、カスタマーサービスの通話、カスタマーサービスの通話の記録を取り、それからJSONの要約を生成するプロンプトの例です。
これを1時間に何千回、あるいは1分に何千回も実行する可能性があります。大規模なコールセンターを運営している場合や、巨大なカスタマーサポートチームがある場合などです。
これを一つ一つ見ていくことはしませんが、後で参照できるようにこのプロンプトを残しておきます。
ここで強調したい最初のことは、エンタープライズグレードのプロンプト、繰り返し可能なプロンプトでは、それらをプロンプトテンプレートとして考えるということです。大部分が同じままで、動的な部分や複数の動的な部分が変数として挿入される大きなプロンプト構造として考えます。
この例では、最初に「以下のカスタマーサービスの通話を分析し、JSONオブジェクトを生成してください」と書かれています。ここに記録があります。
そしてこの行に、実際の通話記録を挿入する場所があります。これは、おそらく文字列メソッドを使用して実際の記録と置き換えることを動的に行います。そして別の実際の記録、何千もの記録を繰り返し可能な方法で処理します。
つまり、Claude.AIのプロンプトのような一回限りのユースケースではなく、テンプレートとして考えるのです。
では、スライドに戻りましょう。ここに重要なプロンプトのヒントをいくつか挙げていますが、最も重要だと思うものを太字にしています。
その一つがプロンプトテンプレートの使用です。その考え方についてはすでに触れました。他にも、Claudeに考えさせることがあります。これはチェーン・オブ・ソートとしても知られています。後で詳しく説明します。
プロンプトをXMLで構造化することです。先ほど見せたプロンプトでもその一部を見ましたが、これから数分間でそれにも焦点を当てます。そして例を使用することです。
これらはすべて、実際にその重要性を裏付ける実データを持つ技術です。
では、これらを一つずつ見ていって、比較的実用的なプロンプトを作成してみましょう。少し長くなります。プロンプトは長くなります。多くのテキスト、多くの文字列が必要です。しかし、一つずつ見ていきましょう。
より大規模な実用的なまたはエンタープライズグレードのプロンプトを構築していきます。
ここで使用するのは、カスタマーレビューの分類と感情分析のプロンプトというアイデアです。
架空のeコマース企業、Acme社を運営していると仮定しましょう。何百もの製品と何千もの顧客レビューがあります。
ClaudeのAPIを使って、それらのレビューの感情と一般的な苦情を理解するのを手伝ってもらいます。
これが仮のレビューだとすると、「最近XYZスマートフォンを購入しました。経験は複雑でした。」良い点と悪い点が列挙されています。「より少ない問題を期待していました」と書かれています。
Claudeには繰り返し可能な方法で、これが肯定的なレビューなのか、否定的なのか、中立なのかを教えてほしいと思います。そして主要な問題とフィードバックのポイントを強調してほしいのです。
特に、何千ものレビューでこれを大規模に行う場合、容易に抽出可能で扱いやすい出力フォーマットが必要でしょう。
多くの場合、それはJSONになります。このようなものです。常に感情スコア（ポジティブ、ネガティブ、またはニュートラル）を持つ繰り返し可能なオブジェクトです。
感情分析というキーの下に分析があり、実際の苦情が列挙されています。パフォーマンスのような点、価値が低い、顔認証が信頼できないなどです。
そして、これを何千ものレビューに対して簡単に大規模に行い、データベースに保存し、チャートを作成するなど、この繰り返し可能な出力で何でもできます。
では、タスクが定義されたので、一つずつ見ていきましょう。カスタマーレビューを取り、それらをJSONに変換し、感情分析情報と顧客の苦情データを抽出したいと思います。
一つずつ見ていき、完全なプロンプトを作成します。
最初のヒントは、モデルの役割を設定することです。実際、これはそれほど強く感じていないものの一つですので、すぐに説明します。
有用なのは、モデルに明確な役割と期待を最初に与えることです。
この場合、次のようになるかもしれません。「あなたは顧客レビューの分析を専門とするAIアシスタントです。あなたのタスクは、与えられたレビューの全体的な感情を判断し、言及された具体的な苦情を抽出することです。以下の指示に注意深く従ってください。」
これは明らかにプロンプトの一部に過ぎませんが、役割を設定し、舞台を整え、モデルが得意とすべきことについてのコンテキストを与えています。
次のステップは、モデルに実際の指示を与えることです。
上にスクロールすると、モデルに「これらの指示に注意深く従ってください」と伝えました。
今度は、非常に明確で直接的な順序付けられた指示のリストを与えます。
最初の指示は、以下の顧客フィードバックを確認することです。これをプロンプトテンプレートにして、ここに実際の顧客レビューを挿入します。
二重の中括弧を使う必要はありません。置き換えたい変数やプレースホルダーには何でも使えます。私たちは二重の中括弧を使うのが好きですが、決して必須ではありません。
また、ここでXMLタグを使用していることに注目してください。これも必須ではありませんが、ClaudeモデルはXMLタグで非常にうまく動作する傾向があります。
顧客レビューがどこで始まり、どこで終わるかをモデルに伝えるために、どんな種類の構文や区切り文字を使用してもかまいません。
これらの顧客レビューの中には、短い数文のものもありますが、非常に不満を持った顧客や非常に熱心な顧客の場合、数千文字になることもあります。
そのため、レビューがどこで始まり、どこで終わるかをモデルに明確に伝えたいのです。
次に焦点を当てるのは、モデルに実行してほしい実際のステップです。
コンテキストを提供し、この顧客フィードバックを確認してほしいと言いました。
最終的にここに顧客フィードバックを挿入します。
モデルに何をしてほしいのでしょうか？
感情スコアを含むJSONを生成してください - ポジティブ、ニュートラル、ネガティブのいずれかで、抽出した苦情のリストを含むように言うだけでも良いかもしれません。
多くの状況でそれは機能するでしょう。しかし、ここで強調したいプロンプトのヒントの一つは、「Claudeに考えさせる」または「チェーン・オブ・ソート」と呼ばれるものです。
基本的に、決定や結論に至る前に、大声で考え、分析を出力して決定を下すのを助けてほしいとモデルに伝えることです。
そして最終的に判断を下すのです。
これは変数instructionの第2部分の例です。別の長い文字列です。
モデルに2番目のステップを伝えています。顧客フィードバックを確認したら、以下のステップを使用してレビューを分析してほしいと思います。
いくつか強調したいことがあります。
まず、このラインはモデルに「レビュー分析テキストで作業を示してください」と伝えています。
XMLを使用する必要はありませんが、ClaudeファミリーのモデルはXMLでうまく動作するので、一般的な戦略としては、特定のXMLテキスト内に特定の出力部分を含めるようClaudeに指示します。
つまり、レビュー分析タグとは別に大声で考えるように指示し、最終結果の実際の分析は別のタグに入れるように指示できます。
モデルに、感情に関連する可能性のあるキーフレーズを抽出することから始めるように指示します。
次に、ポジティブ、ネガティブ、ニュートラルな感情の論拠を検討するように指示します。
実際の全体的な感情の判断を行い、その理由を説明し、実際の顧客レビュー内で見つかった苦情を抽出します。
そして、このセクションはかなり長くなる可能性があることをモデルに伝えます。レビューを徹底的に分析するためです。
これは、すべてのプロンプトが必要とするものではありません。
モデルが実際の結果やJSONでの最終分析を生成する前に、たくさんの思考を生成することになるため、不必要な出力トークンが発生する可能性があります。
そのため、これはすぐに頼るべきものではありませんが、モデルからより良い結果を得るためのより強力な技術の一つとして、ここで紹介しています。
これは私たちの次の指示セットをもたらします。
私たちが望む最終出力の詳細です。
思考に関する指示に加えて、指示の第3部分でモデルに伝えます。
すべてのこれらの部分を一つのプロンプトにまとめることを覚えておいてください。
この第3部分では、モデルにこの正確な構造でJSON出力を生成するように指示します。感情スコア、感情分析が欲しいのです。
スコアは単にポジティブ、ネガティブ、またはニュートラル、分析はより詳細な内容、そして苦情の配列です。
そしてこれをJSONのXMLタグの中で行いたいと思います。XMLである必要はありませんが、簡単に抽出できる方法が必要です。
これが応答の核心部分です。これを何千回も繰り返し行う場合、そのJSONを簡単に繰り返し可能な方法で取得する必要があります。
最後に、基本的な注意事項で終わります。苦情がない場合のエッジケースではどうなりますか？空の配列を使用してください。
これでプロンプトのすべての部分が揃ったので、それらを組み合わせてみましょう。
最終的なプロンプト変数を作成します。F文字列にして、プロンプトの様々な部分を動的に挿入します。
役割を設定する部分のプロンプト、そして指示のパート1、パート2、パート3があります。
私の推奨は、必ずしもこのように個別のチャンクで書く必要はないということです。話しやすく、一つずつ見ていきやすくするために分けただけです。
では、最終的なプロンプトを見てみましょう。
印刷してみると、これがそうです。すべての部分が組み合わさっています。
次に、顧客レビューを受け取り、このプロンプトに挿入し、Claudeに送信し、そしてJSON出力を抽出する関数を書きます。
これがget_review_sentimentという単純な関数で、先ほど小さな部分から組み立てた最終プロンプトを使用します。顧客レビューを渡すことを想定しています。
そして、プロンプトテンプレートを使用しているので、二重中括弧のプレースホルダーを関数に渡される実際の顧客レビューに置き換えることを覚えておいてください。
それからClaudeにリクエストを送信します。最終プロンプトを作成し、それをpromptと呼びます。
そしてそれをこのメッセージのリストで送信します。
そして私は2つのことを行っています。
最初のことは、動作していることを確認するためだけに、モデルの出力全体を印刷しています。この行がそれです。
出力全体を印刷します。これにより思考プロセスを見ることができます。モデルに大声で考え、分析を行うように指示したことを覚えていますね。
そして、JSONタグの間にある内容を抽出します。
ここでは正規表現を使用して、それを行うのを助けています。
JSON開始タグとJSON終了タグの間にあるものを探しています。このプロンプトを作成したとき、モデルに「この構造に従うJSON出力をJSONのXMLタグの中に生成してください」と指示したことを覚えていますか。
JSONをその中に入れてください。
それを行い、そして本当に必要な最終的なJSON出力を印刷します。
そして何らかの理由でそれが見つからない場合は、「エラーがあるか、応答に感情分析がありません」と印刷します。
では、非常に単純なレビューでこれを試してみましょう。
今、非常に単純なものを書いてみます。
これが私が書いた非常に単純なレビューです。「私はAcmeの電話が大好きです。素晴らしいです。少し高価です。でも価値があります。色が大好きです。」かなりポジティブですね。
では、この最初のレビューで関数を実行してみましょう。
このセルを実行してみましょう。
応答が返ってきました。キーフレーズを抽出しています。大声で考えています。
ここにポジティブなものがあります。ここにネガティブなものがあります。
ここに分析があります。
全体的な感情、苦情。実際には一つだけです。少し高価だということです。
そして最後に、抽出した実際のJSONが見えます。
感情スコアはポジティブです。これが分析で、これが苦情です。
苦情はあまりありません。少し高価だということだけです。
ここにもう一つのレビューがあります。もっと長いものです。もっと複雑です。
より多くの問題を列挙しています。一緒に読むことはしませんが、これは誰かが書く可能性のあるレビューにより近いものです。
では、これをモデルで実行してみましょう。
review2変数で実行します。
今回も出力が得られました。かなりの量の出力です。
ポジティブなフレーズを抽出します。
ネガティブなフレーズ。
分析自体を行います。
もっと複雑です。混合していますが、ネガティブな側面がポジティブな側面を上回ると言っています。
これにより、一種のトレースも得られます。
Claudeがなぜ特定の出力を生成したのかを理解することができます。これが大声で考えることのもう一つの利点です。
そして苦情を抽出します。
そして最後に、抽出して何かに使える、データベースに保存して何万回も繰り返すことができるJSON出力が得られます。
示したくないヒントの一つは、非常に大きくなり、書くのが長くなる傾向があるため、例示、別名n-shotプロンプティングです。
ここでの考え方は、プロンプト内でモデルに対応する入力と出力を例として示すことができるということです。
これがどのようなものかの例です。かなり長く、この例やこの特定のプロンプトでは必要ありませんが、モデルに何か難しいことをさせようとしている場合や、不正確な場合、または正しい形式に従っていない場合の定番の戦略の一つです。
ここで私たちがしているのは、モデルに「私たちが求めている分析の種類を理解するのに役立つ入力と出力の例をいくつか示します」と伝えることです。
そして単に「ここにいくつかの例があります。XMLタグの代わりに。ここに最初のものがあります。ここが顧客レビューの入力です。ここがあなたが私に与えるべき理想的な出力です」と言います。
そして、ご覧の通り、この場合は理想的な出力が長いため、かなり長くなっています。
これは一つの例についてのものです。
実際の世界では、プロンプトに例を提供する場合、多くの場合、さまざまなケースをカバーしたいと思います。
この状況では、少なくともポジティブなレビュー、ネガティブなレビュー、ニュートラルなレビュー、レビューが空である、またはレビューが異なる言語で書かれているなどのエッジケースをカバーしたいと思います。
基盤をカバーしたいのです。
つまり、これらの本番レベルのプロンプトを書くのは本当に多くの作業になる可能性があります。
最後に、Anthropicコンソールのプロンプトジェネレーターツールを見てみましょう。
これはこのコースを完了するために必要なものではありませんが、実際の本番グレードのプロンプトを書くための最初の75%までを支援するツールです。
プロンプトの生成をクリックしてみましょう。
私が生成の手助けが必要なプロンプトは、例えば製品の説明や箇条書き、画像、ターゲットとする視聴者、望ましい長さなどを渡すマーケティングコピージェネレーターかもしれません。
ツイートからフルブログ投稿、広告まで、何か書こうとしているかもしれません。
マーケティングコピーの生成を手伝ってほしいのです。
生成をクリックしてみましょう。
すると、以前カバーしたストリーミングを使用して生成されたプロンプトが得られます。
ストリーミングされているのが見えます。
このプロンプトをよく見ると、プロンプト変数のようなものが含まれています。
製品の説明とターゲット視聴者、望ましい長さを挿入します。
そしてこのプロンプトで作業したいと決めることができます。
ご覧の通り、プロンプトを操作できます。
プロンプトを改善するためにクリックできます。
さらに上にスクロールして、プロンプトに動的に追加される例を実際に追加することもできます。
これは、これらの長いプロンプトを書く際の最初の痛点を非常に非常に簡単にするツールです。
まだ完璧なプロンプトをオンデマンドで提供することはできませんが、白紙の状態から始めるよりもずっと良いです。
