このレッスンの終わりまでに、Claudeのツール使用ワークフローを理解できるようになります。独自のツールを定義し、最初から最後まで独自のツールベースのワークフローを実装できるようになります。
始めましょう。
まず、ツール使用が実際に何であるかの説明から始めましょう。ツール使用は、関数呼び出しとしても知られており、基本的にClaudeの固有の機能を拡張する能力です。
Claudeに外部ツールや関数のセットを与え、それらの関数へのアクセスを提供し、モデルがいつでもそれらを呼び出せるようにすることができます。ただし、より具体的に言うと、モデル自体は単にツールや関数の呼び出しを要求するだけで、実際の呼び出しは私たちが行います。
実際に関数の実行を行い、その結果をモデルに送り返します。いくつかの図を見て、カスタマーサポート用の小さなチャットボットを例にしてツール使用を段階的に構築していきます。
しかしその前に、なぜこれが重要なのかについて話しましょう。簡単に言えば、ツール使用はClaudeモデルのユースケースを大幅に拡張します。
通常のプロンプト（画像ベースのプロンプトやテキストプロンプト）を、外部関数の呼び出しと組み合わせることができます。繰り返しになりますが、Claude自体、つまりモデル自体が直接ツールを呼び出すわけではなく、ツールを呼び出したいと判断しているのです。
引数を渡し、実際のツールを呼び出して、その結果をClaudeに返します。これにより、モデル単体ではできないようなことが可能になります。例えば：

動的データの取得
内部データベースの照会
APIとの対話
コードの実行
ウェブの検索
そしてもちろん、コンピュータの制御

このビデオの最後で見るように、ツール使用はcomputer useを可能にし、動作させます。モデルはクリックやマウス移動、タイプなど、様々なコンピュータアクションのためのツール呼び出しを出力できます。
そして私たちはそれらのアクションを実行し、モデルに「はい、あなたが望んだクリックを実行しました」や「あなたが望んだマウス移動を実行しました。画面は今このように見えます」と伝え、新しいスクリーンショットを提供できます。
これについて理解を深めていきましょう。
まず、ツール使用がどのように機能するかを理解する必要があります。ノートブックに戻ると、前回のレッスンと同じ基本的なセットアップがあります。
この図はツール使用の基本的な流れを示しています。左側にモデルがあり、ツールのセットへのアクセスを提供します。この場合、在庫検索、請求書生成、メール送信などです。
これらはモデルに実行してほしい機能かもしれません。この特定の図では、モデルが「在庫検索」というツールを呼び出すことを決定します。
ステップ1として、モデルは「このツールを呼び出したい」と言います。これがどのように見えるかは後で説明します。次に、実際にそのツール、その関数を実行するのは私たち、つまりあなたの役割です。
したがって、在庫検索は何らかの引数を使用して、データベースやAPIに接続して在庫を検索することになるでしょう。結果が得られたら、それをモデルに送り返し、モデルは実行しようとしていたプロセスを完了できます。
繰り返しになりますが、モデルはツールを呼び出すリクエストを発行し、私たちがツールを実行し、その結果をモデルに伝えます。そしてモデルは次にやりたいことを続行できます。
この詳細な図は、そのプロセスを説明しています。モデルにプロンプトとツールのセットを与えます。すぐに、ツールのセットをどのように書き、モデルに提供するかを見ていきます。
次に、モデルがツールを使用したいと判断する可能性があり、その場合は出力します。「これらの引数でこのツールを使用したい」と言います。
そして実際にツールを実行し、APIやデータベース、検索ツールからの戻り値やデータを取得します。その後、ツールの結果をモデルに送り返し、「あなたが呼び出したかったツールの結果はこれです」と伝えます。
最後に、モデルはその結果を使って何かを行うことができます。
したがって、いくつかのステップが関係します：

モデルに与えたいツールのセットを用意する
適切な形式でそれらを定義し、モデルに伝える
ツールの結果をモデルに返す際の適切な形式と往復の流れを理解する

始めに、実際のデータベースの代わりに使用する簡単なデータベースクラスを紹介します。想像力豊かにAcme CorporationまたはAcme Coという会社を運営していると仮定し、この会社にはいくつかの製品があります。
顧客がいて、注文があります。ご覧の通り、顧客は全てプレースホルダーデータで、物事をシンプルに保つためのものです。例えばJohn Doeにはメールアドレスがあり、ユーザー名もJohn Doeです。
このクラスには注文のリストがあり、データベースを表現しています。各注文にはID、顧客ID、製品数量、価格、配送済みか処理中かというステータスがあります。
非常にシンプルです。実際のデータベースの代わりに物事をシンプルに保つためのものです。このクラスには、getUser、getOrderById、getCustomerOrders、cancelOrderなどの様々な関数やメソッドが関連付けられています。
架空のデータベースをインスタンス化して、あなたがカスタマーサポート担当者だと想像してください。誰かがチャットで「私はJohn Doeです。メールアドレスはjohn@gmail.comです。注文をキャンセルしたいのですが」と言ってきます。
注文を見ると、John Doeやユーザー名は関連付けられていません。顧客IDがあります。各ユーザーには顧客IDがあり、利用可能なメソッドを見ると、メール、電話、またはユーザー名でユーザーを検索するgetUserがあります。
注文IDが必要なgetOrderById、顧客IDが必要なgetCustomerOrders、そして注文IDが必要なcancelOrderがあります。
したがって、John Doeが注文をキャンセルしたい場合、John Doeが正確な注文IDを知っているというわけではないので、単にキャンセル注文するだけという単純なものではありません。
複数のステップが必要です：

人間として最初のステップは、このメールアドレスjohn@gmail.comを基にgetUserを使用することです
そうするとJohnにこのユーザーIDがあることがわかります
次のステップは、そのJohn DoeのIDを取得してgetCustomerOrdersを使用して注文を見つけることです
そしてカスタマーサポート担当者として、「3つの注文が見つかりました。2つは発送済みです。発送済みの注文はキャンセルできません。スマートフォンケースの注文をキャンセルしますか？」とフォローアップするでしょう

その場合、この注文IDを取得してDB.cancelOrderを使用してその注文をキャンセルできます。それによってその注文がキャンセルされます。
要点は、複数のステップが必要だということです。全て架空のもので、実際のデータベースではありません。しかし、実際のデータベースを持つ会社を運営していて、カスタマーサポートの一部を自動化するためにClaudeを使用したいと想像してください。
おそらく手の届きやすい部分からでしょう。そしてClaudeにこれらの関数へのアクセスを提供する必要があります。メールや電話、ユーザー名でユーザーを検索できる必要があります。
そしてここにある10人程度のユーザーではなく、何万人もいると想像してください。オーダーを見つけ、顧客に基づいてオーダーを見つけ、オーダーをキャンセルする必要があります。ここには少数のツールしかありません。
では、これらのツールについてClaudeにどのように伝えるのでしょうか？
最初のステップは、各関数のスキーマを定義することです。これはJSONスキーマを通じて行います。JSONスキーマに馴染みがない場合、これはスキーマを定義するための一般的なオープンフォーマットです。
この場合、APIはツールがこのJSONスキーマ形式で渡されることを期待します。これは以前に見たgetUserメソッドのための仮想的なツール定義です。
名前（get_user）と説明があります。これらのツールの説明は、Claudeに「このツールは何をするのか」を伝えるのに重要です。そして、このツールを呼び出すために必要な引数を含む入力スキーマがあります。
getUserがどのようなものかを思い出してください。基礎となる関数には2つのパラメータがあります：keyとvalueで、どちらも必須です。
getUserのツール定義に戻ると、2つの引数があることを示すようにスキーマを書きます。一つはkey、もう一つはvalueで、両方が文字列です。
keyは、このenumを使用して次の選択肢の1つでなければなりません。これはemail、phone、またはusernameのいずれかでなければならないことを示す良い構文です。
ここでの考え方は、メール、電話番号、またはユーザー名でユーザーを検索できるということです。また、その動作を説明する説明文も付いています。
そしてvalueは文字列で、実際のメールアドレス（john@gmail.comなど）、実際の電話番号、または実際のユーザー名である必要があります。
最後に、下部でこのツールを呼び出すために必要な引数を示すことができます。この場合、両方が必須です。
次のステップは、これらのツールすべてを定義することです。4つの異なる関数があります。4つのツール定義またはツールスキーマをJSONスキーマを使用して持つことになり、それらをtoolsのような名前のリストにまとめます。
名前は重要ではありませんが、それらをグループ化します。toolsと呼ばれるこのリストには、4つのJSONスキーマツール定義が含まれています：get_user、get_order_by_id、get_customer_orders、cancel_orderです。これらはすべて、以前に架空のDBクラスで定義したメソッドに対応しています。
次のステップは、Claudeにツールを提供してプロンプトを送信することです。これは単純な一回限りの例です。関数やチャットボットループの中ではありません。
「注文を見せてください。私のユーザー名はpriya123です」というユーザーからの単一のメッセージを持つメッセージリストがあります。
そして最も重要なのは、このハイライトされた行です。以前に見たmodel、max_tokens、messagesなどのフィールドやパラメータに加えて、今度はtoolsを渡しています。

toolsは以前に定義したツールのリストです。モデルはこれらのツールにアクセスできることを知り、必要に応じて呼び出すかどうかを決定できます。
おそらく、このプロンプトが「注文を見せてください。私のユーザー名はpriya123です」と要求している場合、モデルはこのユーザー名に基づいて注文を検索するためのツールを呼び出すはずです。
セルを実行し、response.contentを出力します。これまでに見たことのないものが表示されます。テキストの応答があります：「注文を検索するお手伝いをします。まずユーザー名を使ってユーザーの詳細を取得し、その後注文を取得します」。そしてツール使用ブロックが続きます。
テキストブロックとツール使用ブロックがあります。このツール使用ブロックを見てみましょう。このリストの最後の要素を取って、それに焦点を当ててみましょう。
モデルはGetUserというツールを呼び出したいと考えています。具体的には、keyをusernameに、valueをpriya123に設定して呼び出したいと考えています。
また、tool_use_idもあります。これは重要です。なぜなら、モデルがツールを呼び出したいと言った後の2番目のステップは、実際にツールを実行し、モデルに結果を伝えることだからです。
そしてモデルに結果を伝える際には、ツールの結果自体（関数からのデータ）とこのIDを提供します。これにより、モデルはこのツール結果が最初のツール使用ブロックにどのように対応するかを理解できます。
次のステップは、モデルのToolUseBlock出力を翻訳することです。基本的に「これらの値でget_userを呼び出したい」という状態から、実際にそれらの値でget_userを実行する、あるいは他のツール（get_order_by_id、cancel_order、get_customer_orders）を実行することです。
これは非常に単純な実装ですが、この関数がやっていることはそれです。ツール名とツール入力を受け取ります。これがツール入力です。
モデルが出力したツール名とツール入力を取り、process_tool_callに渡して実際にその関数を実行するのは簡単です。これは以前に見たデータベースDBを使用しています。
それが最初の半分です。2番目の半分は、結果をモデルに送り返すことです。それを行うには、roleがuserでcontentのtypeがtool_resultである追跡メッセージを送信する必要があります。
tool_resultには実際のcontent（この場合はツールを呼び出して返ってきたコンテンツ）とtool_use_idを含める必要があります。このIDは、モデルに送り返す対応するツール結果と一致する必要があります。

もちろん、これを単に定義するだけでは何も起こりません。モデルに送信し、チャットやモデルとの会話を継続できるような何らかのループや関数が必要です。
次のステップは、これらすべてを組み合わせて完全な流れを確認することです。これは、前に見た4つのツールを使用するチャットボットの単純だが完全な実装です。
カバーすべきことが多くありますが、極端に詳しく見る必要はありません。自分で見ることができるように用意されています。しかし、これが核となる機能で、simple_chatと呼ばれる関数です。
システムプロンプトを使用しています。これは、モデルの役割を設定し、期待を設定するための繰り返しの指示を提供する方法です。この場合、プロンプトは「あなたはAcme Coのカスタマーサポートチャットボットです。あなたの仕事はユーザーがアカウントと注文を検索するのを手伝うことです」などと言います。
そして各会話のターンで、応答について考えることから始めます。終わったら、ユーザー向けの応答を書きます。これにより、モデルの内部の考えと、チャットボットとしてユーザーに表示したい実際の返答を分離できます。
ユーザー向けの会話応答はすべてreply XMLタグ内に配置することが重要です。これにより解析が容易になります。
これに関する注意点として、extract_replyという関数があり、その名前の通り、reply XMLタグの間の内容を抽出します。
さらに下の部分で、ユーザー入力の要求から始まります。単一のユーザーメッセージで始まるメッセージリストがあります。おそらく単に「こんにちは」といったものです。
ループを抜けるための方法があります。ユーザーが「quit」という単語を入力した場合です。そしてそれはすべてツール使用に関するもので、メッセージはこのループでモデルに送信されます。
前に定義した4つのツールすべてがツールのリストとして提供されます。プロンプト、システムプロンプトが提供されます。モデル名、最大トークン数、これまでに見たすべてのものです。
その後、モデルは何かで応答します。アシスタントが応答したメッセージを追加します。チャットボットを構築しようとする場合、このメッセージのリストは常に成長していることを覚えておいてください。

このレッスンで最も重要なのは、モデルがツール使用で停止した場合の対応です。数レッスン前に見たstop_reasonを思い出してください。モデルが停止する理由はいくつかあります：

自然な停止点に達した場合
停止シーケンスに到達した場合
最大トークン数に達した場合
ツールを呼び出したい場合に生成を停止し、ツール結果を待つ場合

もしモデルがそうしたい場合は、ツール使用情報（名前と入力を含む）を抽出します。ここには、Claudeが特定のツールを使用したいことを知らせる出力があります。
その後、前に見た関数Process_tool_callを使用して、基礎となるツールを処理します。最後に、会話履歴にツール結果を追加します。これにはtool_use_idと、基礎となるツール関数から返された実際の値が含まれ、そしてループが繰り返されます。
Claudeがツールを使用したくない場合は、単にモデルの応答を出力し、モデルとチャットを試みることができます。
simple_chat関数を実行し、最初の会話メッセージを入力します。おそらく「こんにちは」のような感じで始めます。
応答があります：「こんにちは、Acme Coカスタマーサポートへようこそ。どのようにお手伝いできますか？アカウント情報の検索、注文状況の確認、または注文のキャンセルができます。」
架空のデータベースにあるユーザーの一人で、ユーザー名がpriya123のPriyaとして投稿してみましょう。
「注文状況を確認したい」と書きます。すると、モデルは「喜んでお手伝いさせていただきます。注文IDをご提供ください」と返信します。私にはそれがないので、代わりに「ユーザー名はpriya123です」と言います。
Enterを押すと、モデルはおそらくツールを呼び出したいと考えるでしょう。実際に2つのツールを呼び出しました：

最初にget_userを呼び出してPriyaの情報を検索
そこからPriyaのユーザーIDを取得
次にそのユーザーIDを使用してget_customer_ordersを呼び出し

最後に、注文を見つけて応答を返しました：「Bluetoothスピーカーとワイヤレスヘッドホンという2つの最近の注文があります。これらについて具体的に知りたいことはありますか？」
これがワークフローの簡単なデモンストレーションです。

まとめとして、computer useのクイックスタート実装に戻りましょう。次のビデオでもっと詳しく見ていきますが、実際にツールを使用していることを示したいと思います。
上部には様々なツールをインポートする部分があります。コンピュータツールは最も多くの人が興味を持つものです。クリック機能やマウス移動が含まれています。
すべてのツールはtool_collectionという変数に組み合わされています。モデルにリクエストが送信されると、ツールが渡されます。先ほど見たのと同じように、tools=ツールのリストという形です。
そしてモデルが応答を返し、ツールを使用したい場合、つまりcontent blockのtypeがtool_useの場合、ツールを実行するためのロジックがここにあります。
そしてツール結果を作成し、それをモデルに送り返します。コードは少し洗練されており、いくつかのヘルパー関数があります。ファイルを跨いで分割されていますが、このレッスンで見たのと同じ核となるツール使用機能です。
これがツール使用に関するレッスンの内容でした。ツール使用の基本的な概念、実装方法、そして実際の応用例について学びました。次のレッスンでは、コンピュータ制御に関してより詳しく見ていく予定です。
